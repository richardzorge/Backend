//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/skytgtr/ANTLR/commands/commands.g by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class commandsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, ENDLINE=2, USER_NAME=3, CMD=4;
	public const int
		RULE_comand = 0;
	public static readonly string[] ruleNames = {
		"comand"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "ENDLINE", "USER_NAME", "CMD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "commands.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static commandsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public commandsParser(ITokenStream input) : this(input, System.Console.Out, System.Console.Error) { }

		public commandsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ComandContext : ParserRuleContext {
		public ITerminalNode CMD() { return GetToken(commandsParser.CMD, 0); }
		public ITerminalNode ENDLINE() { return GetToken(commandsParser.ENDLINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(commandsParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(commandsParser.WS, i);
		}
		public ITerminalNode USER_NAME() { return GetToken(commandsParser.USER_NAME, 0); }
		public ComandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comand; } }
	}

	[RuleVersion(0)]
	public ComandContext comand() {
		ComandContext _localctx = new ComandContext(Context, State);
		EnterRule(_localctx, 0, RULE_comand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2; Match(CMD);
			State = 4;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3; Match(WS);
				}
				}
				State = 6;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WS );
			State = 14;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER_NAME) {
				{
				State = 8; Match(USER_NAME);
				State = 10;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 9; Match(WS);
					}
					}
					State = 12;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				}
			}

			State = 16; Match(ENDLINE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x6', '\x15', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x6', '\x2', '\a', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\b', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\r', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '\xE', '\x5', '\x2', '\x11', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x2', '\x2', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x16', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x6', '\a', '\x6', '\x2', '\x2', '\x5', '\a', '\a', '\x3', '\x2', '\x2', 
		'\x6', '\x5', '\x3', '\x2', '\x2', '\x2', '\a', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x6', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x10', '\x3', '\x2', '\x2', '\x2', '\n', '\f', '\a', 
		'\x5', '\x2', '\x2', '\v', '\r', '\a', '\x3', '\x2', '\x2', '\f', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x11', '\x3', '\x2', '\x2', '\x2', '\x10', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\x4', '\x2', '\x2', 
		'\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x5', '\b', '\xE', '\x10',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
